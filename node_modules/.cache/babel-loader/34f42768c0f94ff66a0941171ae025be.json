{"ast":null,"code":"var _jsxFileName = \"/Users/brendahenriquez/Desktop/swe432/swe432-heorku-react-app2021/src/components/Fetcher.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Skeleton from '@material-ui/core/Skeleton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst publicURL = 'https://swe432tomcat.herokuapp.com';\n\nconst getLocationUrlData = () => {\n  return {\n    url: publicURL,\n    hash: `${window.location.hash}`\n  };\n};\n\nconst servicePath = '/echo';\n\nfunction Fetcher(props) {\n  _s();\n\n  const {\n    url,\n    value\n  } = props;\n  const [clicks, setClicks] = useState(0);\n  const [response, setResponse] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const body = `input=${inputValue}&value=${value}`;\n  const fetchData = useCallback(async () => {\n    const res = await fetch(url, {\n      method: 'POST',\n      // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      //credentials: 'same-origin', // include, *same-origin, omit\n      headers: {\n        // 'Content-Type': 'application/json'\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      //redirect: 'follow', // manual, *follow, error\n      //referrerPolicy: 'no-referrer', // no-referrer, *client\n      body // body data type must match \"Content-Type\" header\n\n    });\n    const json = await res.json();\n    setResponse(json);\n  }, [url, body]);\n  useEffect(() => {\n    setResponse(null);\n    fetchData().catch(e => {\n      console.log(e);\n    });\n  }, [fetchData]);\n\n  const doSomething = function (event) {\n    console.log(event.currentTarget.getAttribute('data-something'));\n    setClicks(clicks + 1);\n  };\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: true,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [\"submits: \", clicks]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: true,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Type something\",\n        helperText: \"This will be echo echo by the server\",\n        value: inputValue,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: doSomething,\n        variant: \"contained\",\n        color: \"primary\",\n        \"data-something\": \"submit\",\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: true,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        style: {\n          height: 200,\n          width: 200,\n          wordBreak: \"break-all\",\n          padding: 4\n        },\n        children: response ? JSON.stringify(response) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n            variant: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n            variant: \"circle\",\n            width: 40,\n            height: 40\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n            variant: \"rect\",\n            width: 200,\n            height: 118\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Fetcher, \"LI5iyPEEcnABVmKBcajz1BdWTqE=\");\n\n_c = Fetcher;\nexport default function FetcherControlled(props) {\n  const url = `${getLocationUrlData().url}${servicePath}`;\n  return /*#__PURE__*/_jsxDEV(Fetcher, {\n    value: \"someValue\",\n    url: url\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 11\n  }, this);\n}\n_c2 = FetcherControlled;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Fetcher\");\n$RefreshReg$(_c2, \"FetcherControlled\");","map":{"version":3,"sources":["/Users/brendahenriquez/Desktop/swe432/swe432-heorku-react-app2021/src/components/Fetcher.js"],"names":["React","useState","useEffect","useCallback","Paper","Button","Grid","TextField","Typography","Skeleton","publicURL","getLocationUrlData","url","hash","window","location","servicePath","Fetcher","props","value","clicks","setClicks","response","setResponse","inputValue","setInputValue","body","fetchData","res","fetch","method","mode","cache","headers","json","catch","e","console","log","doSomething","event","currentTarget","getAttribute","handleChange","target","height","width","wordBreak","padding","JSON","stringify","FetcherControlled"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Skeleton from '@material-ui/core/Skeleton';\n\nconst publicURL = 'https://swe432tomcat.herokuapp.com';\nconst getLocationUrlData = () => {\n  return {\n      url:publicURL,\n      hash: `${window.location.hash}`\n  };\n};\n\nconst servicePath ='/echo';\n\nfunction Fetcher(props) {\n    const { url, value} = props;\n    const [clicks, setClicks] = useState(0);\n    const [response, setResponse] = useState(null);\n    const [inputValue, setInputValue] = useState(\"\");\n    const body = `input=${inputValue}&value=${value}`;\n\n    const  fetchData= useCallback(async()=>{\n      const res = await fetch(url,\n        {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          //credentials: 'same-origin', // include, *same-origin, omit\n          headers: {\n            // 'Content-Type': 'application/json'\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          //redirect: 'follow', // manual, *follow, error\n          //referrerPolicy: 'no-referrer', // no-referrer, *client\n          body  // body data type must match \"Content-Type\" header\n        }\n      );\n      const json = await res.json();\n      setResponse(json);\n    },\n     [url, body]\n   );\n\n    useEffect( ()=> {\n      setResponse(null);\n      fetchData().catch(e=>{console.log(e)});\n    }, [fetchData]);\n\n    const doSomething = function (event) {\n        console.log(event.currentTarget.getAttribute('data-something'));\n        setClicks(clicks + 1);\n    }\n    const handleChange = (event) => {\n      setInputValue(event.target.value);\n    };\n\n\n    return (\n        <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n        >\n          <Grid item xs>\n            <Typography variant=\"h6\">submits: {clicks}</Typography>\n          </Grid>\n            <Grid item xs>\n              <TextField\n              label=\"Type something\"\n              helperText=\"This will be echo echo by the server\"\n              value={inputValue} onChange={handleChange} />\n            </Grid>\n            <Grid item xs>\n              <Button onClick={doSomething} variant=\"contained\" color=\"primary\" data-something=\"submit\">\n                  submit</Button>\n            </Grid>\n            <Grid item xs>\n              <Paper elevation={1} style={\n                {height:200, width:200, wordBreak: \"break-all\", padding:4}\n              } >\n                {response?JSON.stringify(response):\n                (<React.Fragment>\n                <Skeleton variant=\"text\" />\n                <Skeleton variant=\"circle\" width={40} height={40} />\n                <Skeleton variant=\"rect\" width={200} height={118} />\n                </React.Fragment>)}\n                </Paper>\n              </Grid>\n        </Grid>\n\n    );\n}\n\n\nexport default function FetcherControlled(props) {\n  const url = `${getLocationUrlData().url}${servicePath}`;\n  \n  return  <Fetcher value={\"someValue\"} url={url}/>;\n}\n"]},"metadata":{},"sourceType":"module"}